package io.github.jhipster.jdl.ui.wizard

import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static extension io.github.jhipster.jdl.ui.wizard.util.ProjectWizardUtil.GenerateProjectsDelegator.*
import static extension io.github.jhipster.jdl.ui.wizard.util.ProjectWizardUtil.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class JDLProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new JHipsterMonolithProject]
	}
}

@ProjectTemplate(label='JHipster Monolith App', icon='JHipsterProject.gif', description='<p><b>Wizard for Monolith App</b></p>
<p>This is a JHipster project wizard to create a monolith application. You can set a parameter to modify the content in the generated file
and a parameter to set the package.</p>')
final class JHipsterMonolithProject {
	val group = group('Properties')
	val pkg = text('Package:', 'com.mycompany.myapp', 'The package path to place the files in', group)
    val baseName = text('Base name:', 'myMonolithApp', 'The base name', group)

    var template = '''
        /**
         * JHipster JDL model for «baseName»
         */
        
        application {
          config {
            packageName «pkg»
            baseName «baseName»
            applicationType monolith
            databaseType sql
            // more configuration options goes here
          }
          // filter entities here
          // entities * except EntityA
        }
        
        // entity definitions here
        entity EntityA { 
            myFieldA String 
        }
        
        /**
         * Entity B
         * @author Generated by JHipster
         */
        entity EntityB { 
            myFieldB String required
        }
    '''    

	override protected validate() {
	   return validatePath(pkg.path)
	}

	override generateProjects(IProjectGenerator it) {
        generateProjects(
            new PluginProjectFactory, projectInfo, '''«baseName».jdl''', pkg.path, template
        )
	}
}
