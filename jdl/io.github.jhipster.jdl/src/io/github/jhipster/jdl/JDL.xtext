/**
 * Copyright 2013-2018 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see http://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
/**
 * @author Jose Badeau - Initial contribution and API
 * @author Serano Colameo - Initial contribution and API
 */
 
grammar io.github.jhipster.jdl.JDL hidden(WS, ML_COMMENT, SL_COMMENT)

generate jdl "http://www.github.io/jhipster/jdl/JDL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/* =========================================================================
 * ROOT
 * ========================================================================= */

JdlDomainModel:
	applications+=JdlApplication*
	features+=JdlFeature*;

JdlFeature:
	JdlConstant | JdlEntity | JdlEnum | JdlRelationships | JdlOption;

/* =========================================================================
 * APPLICTION
 * ========================================================================= */ 

JdlApplication: 
	'application' '{'
		config=JdlApplicationConfig
		selection=JdlApplicationEntitiesSelection?
		exclusion=JdlExceptEntityExclusion?
	'}';

JdlApplicationConfig:
	'config' {JdlApplicationConfig} '{'
		(paramters+=JdlApplicationParameter ','?)*
	'}';	

JdlApplicationEntitiesSelection:
	'entities' (predicate=JdlWildcardPredicate | selection=JdlEntitySelection);
			
JdlApplicationParameter:
	paramName=JdlApplicationParameterName paramValue=JdlApplicationParameterValue;

enum JdlApplicationParameterName:
	applicationType | authenticationType | baseName |
	buildTool | cacheProvider | clientFramework | clientPackageManager |
    databaseType | devDatabaseType | enableHibernateCache |
    enableSwaggerCodegen | enableTranslation | jhiPrefix |
	jhipsterVersion | languages | messageBroker |
	nativeLanguage | packageName | prodDatabaseType |
	searchEngine | serverPort | serviceDiscoveryType |
	skipClient | skipServer | skipUserManagement |
    testFrameworks | uaaBaseName | useSass | websocket;

JdlApplicationParameterValue:
	('['? identifiers+=JdlApplicationParameterLiteral (JdlParamValueSeparator identifiers+=JdlApplicationParameterLiteral)* ']'?) 
		| stringValue=STRING | numberValue=INT | version=JdlApplicationParameterVersion;

JdlApplicationParameterLiteral:
	ID | NUMERIC_PREFIXED_ID | JdlReserverdWords;

JdlApplicationParameterVersion:
	versionTag=VERSION_TAG; 

JdlParamValueSeparator: 
	'.' | ',';

JdlReserverdWords:
	'microservice' | 'elasticsearch' | 'skipClient' | 'skipServer';

/* =========================================================================
 * CONSTANT
 * ========================================================================= */

JdlConstant:
	name=ID '=' value=INT;

JdlNumericValue:
	constant=[JdlConstant] | value=INT;

/* =========================================================================
 * ENTITY
 * ========================================================================= */

JdlEntity:
	'entity' name=ID ('(' table=ID ')')? ('{'
		(fields+=JdlEntityField (','? fields+=JdlEntityField)*)?
	'}')?;

JdlEntityField:
	name=ID type=JdlFieldType;

JdlFieldType:
	  JdlEnumFieldType 
	| JdlStringFieldType 
	| JdlNumericFieldType 
	| JdlBooleanFieldType 
	| JdlDateFieldType 
	| JdlBlobFieldType 
	| JdlEntityType;

JdlEntityType:
	element=JdlEntity;

JdlEnumFieldType:
	element=[JdlEnum] validators+=JdlRequiredValidator*;

JdlStringFieldType:
	element=JdlStringType validators+=JdlStringValidators*;

JdlStringType:
	element='String';

JdlNumericFieldType:
	element=JdlNumericTypes validators+=JdlNumericValidators*;

enum JdlNumericTypes:
	Integer | Long | BigDecimal | Float | Double;

JdlBooleanFieldType:
	element=JdlBooleanType validators+=JdlRequiredValidator*;

JdlBooleanType:
	element='Boolean';

JdlDateFieldType:
	element=JdlDateTypes validators+=JdlRequiredValidator*;

enum JdlDateTypes:
	Date | LocalDate | ZonedDateTime | Instant | UUID;
	
JdlBlobFieldType:
	element=JdlBlobTypes validators+=JdlBlobValidators*;

enum JdlBlobTypes:
	Blob | AnyBlob | ImageBlob | TextBlob;

/* =========================================================================
 * VALIDATOR
 * ========================================================================= */

JdlStringValidators:
	required?=JdlRequiredValidator |
	minlength=JdlMinLengthValidator |
	maxlength=JdlMaxLengthValidator |
	pattern=JdlPatternValidator;

JdlNumericValidators:
	required?=JdlRequiredValidator | 
	min=JdlMinValidator | 
	max=JdlMaxValidator;

JdlBlobValidators:
	required?=JdlRequiredValidator |
	minbytes=JdlMinBytesValidator | 
	maxbytes=JdlMaxBytesValidator;

JdlRequiredValidator:
	required?='required';

JdlMinLengthValidator:
	'minlength' '(' value=JdlNumericValue ')';

JdlMaxLengthValidator:
	'maxlength' '(' value=JdlNumericValue ')';

JdlPatternValidator:
	'pattern' '(' value=REG_EXP ')';

JdlMinValidator:
	'min' '(' value=JdlNumericValue ')';

JdlMaxValidator:
	'max' '(' value=JdlNumericValue ')';

JdlMinBytesValidator:
	'minbytes' '(' value=JdlNumericValue ')';

JdlMaxBytesValidator:
	'maxbytes' '(' value=JdlNumericValue ')';

/* =========================================================================
 * RELATIONSHIP
 * ========================================================================= */

JdlRelationships:
	'relationship' cardinality=JdlCardinality '{'
		relationships+=JdlRelationship (','? relationships+=JdlRelationship)*
	'}';

JdlRelationship:
	source=JdlRelation 'to' target=JdlRelation;

JdlRelation:
	entity=[JdlEntity] role=JdlRelationRole?;

JdlRelationRole:
	'{' name=ID ((required?=JdlRequiredValidator)? & ('(' role=ID ')')?) '}';

enum JdlCardinality:
	OneToMany | ManyToOne | OneToOne | ManyToMany;

/* =========================================================================
 * ENUM
 * ========================================================================= */

JdlEnum:
	'enum' name=ID '{'
		values+=ID (','? values+=ID)*
	'}';

/* =========================================================================
 * OPTION 
 * ========================================================================= */

JdlOption:
	setting=JdlOptionSetting (excludes=JdlExceptEntityExclusion)?;

JdlOptionSetting:
	JdlDtoOption |
	JdlPaginateOption |
	JdlServiceOption |
	JdlMicroserviceOption |
	JdlSearchOption |
	JdlSkipClientOption |
	JdlSkipServerOption |
	JdlAngularSuffixOption |
	JdlClientRootFolderOption |
	JdlNoFluentMethodOption |
	JdlFilterOption;

JdlWithEntitySelectionAndValue returns JdlOptionSelection:
	(predicate=JdlWildcardPredicate | selection=JdlEntitySelection) 'with';

JdlForEntityInclusion returns JdlOptionSelection:
	hasFor?='for'? (predicate=JdlWildcardPredicate | selection=JdlEntitySelection);

JdlExceptEntityExclusion:
	'except' selection=JdlEntitySelection;

JdlEntitySelection:
	entities+=[JdlEntity] (',' entities+=[JdlEntity])*;

JdlWildcardPredicate:
	wildcard?='*' | all?='all';

/* =========================================================================
 * DTO OPTION 
 * ========================================================================= */

JdlDtoOption returns JdlOptionSetting:
	dtoOption?='dto' includes=JdlWithEntitySelectionAndValue dtoType=JdlDtoType;

enum JdlDtoType:
	mapstruct;

/* =========================================================================
 * PAGINATION OPTION 
 * ========================================================================= */

JdlPaginateOption returns JdlOptionSetting:
	paginateOption?='paginate' includes=JdlWithEntitySelectionAndValue paginateType=JdlPaginateType;

JdlPaginateType:
	pagination?=('pager' | 'pagination') | infiniteScroll?='infinite-scroll';

/* =========================================================================
 * SERVICE OPTION 
 * ========================================================================= */

JdlServiceOption returns JdlOptionSetting:
	serviceOption?='service' includes=JdlWithEntitySelectionAndValue serviceType=JdlServiceType;

enum JdlServiceType:
	serviceClass | serviceImpl;

/* =========================================================================
 * MICRO SERVICE OPTION 
 * ========================================================================= */

JdlMicroserviceOption returns JdlOptionSetting:
	microserviceOption?='microservice' includes=JdlWithEntitySelectionAndValue appname=ID;

/* =========================================================================
 * SEARCH OPTION 
 * ========================================================================= */

JdlSearchOption returns JdlOptionSetting:
	searchOption?='search' includes=JdlWithEntitySelectionAndValue searchType=JdlSearchType;

enum JdlSearchType:
	elasticsearch;

/* =========================================================================
 * SKIP CLIENT OPTION 
 * ========================================================================= */

JdlSkipClientOption returns JdlOptionSetting:
	skipClientOption?='skipClient' includes=JdlForEntityInclusion;

/* =========================================================================
 * SKIP SERVER OPTION 
 * ========================================================================= */
JdlSkipServerOption returns JdlOptionSetting:
	skipServerOption?='skipServer' includes=JdlForEntityInclusion;

/* =========================================================================
 * ANGULAR SUFFIX OPTION 
 * ========================================================================= */
JdlAngularSuffixOption returns JdlOptionSetting:
	angularSuffixOption?='angularSuffix' includes=JdlWithEntitySelectionAndValue id=ID;

/* =========================================================================
 * CLIENT ROOT FOLDER OPTION 
 * ========================================================================= */

JdlClientRootFolderOption returns JdlOptionSetting:
	angularSuffixOption?='clientRootFolder' includes=JdlWithEntitySelectionAndValue id=ID;

/* =========================================================================
 * Filter OPTION 
 * ========================================================================= */

JdlFilterOption returns JdlOptionSetting:
	filterOption?='filter' includes=JdlForEntityInclusion;

/* =========================================================================
 * NO FLUENT METHOD OPTION 
 * ========================================================================= */

JdlNoFluentMethodOption returns JdlOptionSetting:
	noFluentMethodOption?='noFluentMethod' includes=JdlForEntityInclusion;

/* =========================================================================
 * TERMINAL DEFINITIONS
 * ========================================================================= */

terminal ID: ('a'..'z'|'A'..'Z'|'_'|'-') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;
terminal NUMERIC_PREFIXED_ID returns ecore::EString: INT? ID;
terminal VERSION_TAG returns ecore::EString: INT '.' INT ('.' INT)? ('-' ID)?;
terminal WS: (' '|'\t'|'\r'|'\n')+;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING: '"' EXP '"' | "'" EXP "'";
terminal fragment EXP: ('\\' . | !('\\'|'"'|'\r'|'\n'))*;
terminal ML_COMMENT: '/*' -> '*/';
terminal SL_COMMENT: '//' ANY;
terminal REG_EXP: '/' ANY '/';
terminal fragment ANY: !('\n'|'\r'|'/')* ('\r'? '\n')?;

/* =========================================================================
 * END OF GRAMMAR DEFINITION 
 * ========================================================================= */
